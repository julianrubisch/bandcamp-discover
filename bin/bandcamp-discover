#!/usr/bin/env ruby
require 'gli'
require 'bandcamp-discover'

class App
  extend GLI::App

  program_desc 'Describe your application here'

  version BandcampDiscover::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Scrape bandcamp discover, labels, or albums'
  # arg_name 'Describe arguments to scrape here'
  command :scrape do |c|
    c.desc 'Use a headless browser'
    c.switch :headless, default_value: true

    c.desc 'Maximum tasks for scraping a label'
    c.flag :"max-tasks", default_value: 2

    c.arg "genre"
    c.command :discover do |discover|
      discover.action do |global_options,options,args|
        genre = args.shift
        genre ||= "experimental"

        Playwright.create(playwright_cli_executable_path: 'npx playwright') do |playwright|
          playwright.chromium.launch(headless: options["headless"]) do |browser|
            puts BandcampDiscover::Scrapers::Discover.new(genre:, browser:).scrape
          end
        end

        # If you have any errors, just raise them
        # raise "that command made no sense"
      end
    end

    c.arg "url", required: true
    c.command :label do |label|
      label.action do |global_options,options,args|
        url = args.shift

        Playwright.create(playwright_cli_executable_path: 'npx playwright') do |playwright|
          playwright.chromium.launch(headless: options["headless"]) do |browser|
            puts BandcampDiscover::Scrapers::Label.new(url:, browser:, max_tasks: options.values.first["max-tasks"].to_i).scrape
          end
        end

        # If you have any errors, just raise them
        # raise "that command made no sense"
      end
    end
  end

  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
